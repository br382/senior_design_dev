/*
 Unless explicitly cast, all units are int (px)
 Tkinter sets top-left as (0,0) and bottom-right as (w,h).
 *.min_(w,h) is a rectangle's top-left corner
 *.max_(w,h) is a rectangle's bottom-right corner
 *.(w/h) size of that object regardless of position.

*/

spacing_pad    = 1  //percentage
spacing_column = 10 //percentage

(screen_w, screen_h) = getScreenResolution()
screen_dimension_min = min(w,h)
delta = screen_dimension_min * spacing_pad / 100 #padding between elements


air.w = spacing_pad * screen_dimension_min / 100
air.h = screen_h - 2 * delta
air.aspect = float(air.w) / float(air.h)
air.min_h  = 0         + delta
air.max_h  = screen_h  - delta
air.min_w  = 0         + delta
air.max_w  = air.min_w + air.w


paint.w = spacing_pad * screen_dimension_min / 100
paint.h = screen_h - 2 * delta
paint.aspect = float(air.w) / float(air.h)
paint.min_h  = 0          + delta
paint.max_h  = screen_h   - delta
paint.min_w  = screen_w   - delta - paint.w
paint.max_w  = screen_w   - delta



/*
//Example Use Case:

class sideBar():
    __init__(self, (screen_w, screen_h), width, delta, side='left'):
        self.w      = width
        self.h      = screen_h - 2 * delta
        self.aspect = float(a.w)/float(a.h)
        self.min_h  = 0 + delta
	self.max_h  = screen_h - delta
	if side=='left'
            self.min_w  = 0        + delta
            self.max_w  = a.min_w  + a.w
        else:
            self.min_w  = screen_w - delta - self.w
            self.max_w  = screen_w - delta

class air(sideBar):
    __init(self, (screen_w, screen_h), width, delta, side='left')__:
    sideBar.__init__(self, (screen_w, screen_h), width, delta, side=side)

class paint(sideBar):
    __init(self, (screen_w, screen_h), width, delta, side='right')__:
    sideBar.__init__(self, (screen_w, screen_h), width, delta, side=side)
*/


square.w      = screen_w - 4*delta - air.w - paint.w
square.h      = screen_h - 2*delta
square.aspect = float(square.w) / float(square.h)
square.min_w  = 2*delta + air.w
square.min_h  = 1*delta
square.max_w  = square.min_w + square.w
square.max_h  = square.min_h + square.h
square.ring_count = 4
square.ring_radius = min(square.w, square.h)
square.rings = []
for i in range(0, square.ring_count):
    min_w = square.min_w + (i * square.w / (square.ring_count * 2))
    min_h = square.min_h + (i * square.h / (square.ring_count * 2))
    max_w = square.max_w - (i * square.w / (square.ring_count * 2))
    max_h = square.max_h - (i * square.h / (square.ring_count * 2))
    square.rings[i] = [min_w, min_h, max_w, max_h] //used as elipse() arguments

/*
// Example Use Case:
class square():
    __init(self, (screen_w, screen_h), (air_w, air_h), (paint_w, paint_h), delta, rings=4)__:
        self.w      = screen_w - 4*delta - air_w - paint_w
        self.h      = screen_h - 2*delta
        self.aspect = float(self.w) / float(self.h)
        self.min_w  = 2*delta + air_w
        self.min_h  = 1*delta
        self.max_w  = self.min_w + self.w
        self.max_h  = self.min_h + self.h
        self.ring_count = rings
        self.ring_radius = min(self.w, self.h)
        self.rings = []
        for i in range(0, self.ring_count):
            min_w = self.min_w + (i * self.w / (self.ring_count * 2))
            min_h = self.min_h + (i * self.h / (self.ring_count * 2))
            max_w = self.max_w - (i * self.w / (self.ring_count * 2))
            max_h = self.max_h - (i * self.h / (self.ring_count * 2))
            self.rings[i] = [min_w, min_h, max_w, max_h] //used as elipse() arguments
*/